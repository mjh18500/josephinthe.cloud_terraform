name: Deploy Test Environment and Run Tests

on:
  pull_request:
    branches: [main]

env:
  TF_VERSION: 1.7.0
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  # -----------------------------------
  # 🧹 Lint Terraform Code (FAST)
  # -----------------------------------
  lint:
    runs-on: ubuntu-latest
    container: 
      image: mjh18500/tfimage2:latest
      options: --user root
    name: Terraform Lint
    steps:
      - uses: actions/checkout@v4

      # Quick format check only
      - name: Terraform Format Check
        working-directory: terraform/environments/test
        run: |
          terraform fmt -check -recursive
          echo "✅ Linting completed (fast mode)"

  # -------------------------------
  # 🧪 Mock deployment (FAST)
  # -------------------------------
  deploy-test-env:
    needs: lint
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    runs-on: ubuntu-latest
    container: 
      image: mjh18500/tfimage2:latest
      options: --user root
    name: Deploy Test Infrastructure
    env:
      ENV_ID: ${{ github.event.pull_request.number }}
      RESOURCE_GROUP_NAME: "test-${{ github.event.pull_request.number }}"
      LOCATION: "eastus2"
    outputs:
      env_id: ${{ steps.set-env-id.outputs.env_id }}
    steps:
      - uses: actions/checkout@v4
      
      - id: set-env-id
        run: echo "env_id=${{ env.ENV_ID }}" >> $GITHUB_OUTPUT

      # Save ENV_ID for production workflow
      - name: Write ENV_ID to file
        run: echo "${{ env.ENV_ID }}" > env_id.txt

      - name: Upload ENV_ID artifact
        uses: actions/upload-artifact@v4
        with:
          name: env-id
          path: env_id.txt

      # Mock deployment (just sleep to simulate work)
      - name: Mock Terraform Deployment
        run: |
          echo "🚀 Starting mock deployment for test-${{ env.ENV_ID }}"
          echo "📦 Resource Group: ${{ env.RESOURCE_GROUP_NAME }}"
          echo "🌍 Location: ${{ env.LOCATION }}"
          sleep 10  # Simulate deployment time
          echo "✅ Mock deployment completed successfully!"

  # -------------------------------------
  # ✅ Mock Testing (FAST)
  # -------------------------------------
  test:
    needs: deploy-test-env
    runs-on: ubuntu-latest
    container: 
      image: mjh18500/tfimage2:latest
      options: --user root
    name: Run Cypress & E2E Tests
    env:
      ENV_ID: test-${{ github.event.pull_request.number }}
      RESOURCE_GROUP_NAME: "test-${{ github.event.pull_request.number }}"
    steps:
      - uses: actions/checkout@v4

      # Mock test execution
      - name: Mock E2E Tests
        run: |
          echo "🧪 Starting mock E2E tests for ${{ env.ENV_ID }}"
          echo "🔗 Mock Frontend URL: https://test-${{ env.ENV_ID }}.example.com"
          echo "🔗 Mock API URL: https://api-test-${{ env.ENV_ID }}.example.com"
          sleep 5  # Simulate test execution time
          echo "✅ All mock tests passed!"

      # Create a simple test report
      - name: Generate Mock Test Results
        run: |
          echo "Test Results Summary:" > test-results.txt
          echo "- Login Test: PASSED" >> test-results.txt
          echo "- API Health Check: PASSED" >> test-results.txt
          echo "- Database Connection: PASSED" >> test-results.txt
          echo "- Frontend Load: PASSED" >> test-results.txt
          cat test-results.txt

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.txt