name: Deploy Production

on:
  push:
    branches: [main]

env:
  TF_VERSION: 1.7.0
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}      

jobs:
  # Check if this push came from a merged PR
  check-pr-merge:
    runs-on: ubuntu-latest
    container: 
      image: mjh18500/tfimage2:latest
      options: --user root
    name: Check if PR was merged
    outputs:
      is_merged_pr: ${{ steps.check.outputs.is_merged_pr }}
      pr_number: ${{ steps.check.outputs.pr_number }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if push is from merged PR
        id: check
        run: |
          # Check if the commit has a merge commit pattern
          COMMIT_MESSAGE=$(git log --format=%B -n 1 ${{ github.sha }})
          echo "Commit message: $COMMIT_MESSAGE"
          
          if [[ "$COMMIT_MESSAGE" =~ ^Merge\ pull\ request\ \#([0-9]+) ]]; then
            PR_NUMBER=$(echo "$COMMIT_MESSAGE" | grep -oP 'Merge pull request #\K[0-9]+')
            echo "is_merged_pr=true" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "✅ This push is from merging PR #$PR_NUMBER"
          else
            echo "is_merged_pr=false" >> $GITHUB_OUTPUT
            echo "pr_number=" >> $GITHUB_OUTPUT
            echo "❌ This push is not from a merged PR"
          fi

  deploy-prod:
    needs: check-pr-merge
    if: needs.check-pr-merge.outputs.is_merged_pr == 'true'
    runs-on: ubuntu-latest
    container: 
      image: mjh18500/tfimage2:latest
      options: --user root
    name: Deploy to Production
    environment:
      name: production
      url: https://josephinthe.cloud

    steps:
      - uses: actions/checkout@v4

       # Cache Terraform providers (shared with test workflow)
      - name: Cache Terraform providers
        uses: actions/cache@v3
        with:
          path: /home/runner/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ env.TF_VERSION }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-${{ env.TF_VERSION }}-
            ${{ runner.os }}-terraform-

      - name: Init and Apply Production
        working-directory: terraform/environments/prod
        run: |
          terraform init
          terraform validate
          terraform apply -auto-approve \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="user_object_id=${{ secrets.ARM_USER_OBJECT_ID }}" \
            -var="resource_group_name=prodrg" \
            -var="location=eastus2" \
            -var="env_name=prod"

# -------------------------------------
# ✅ Run Cypress E2E Tests
# -------------------------------------
  prodtest:
    needs: deploy-prod
    runs-on: ubuntu-latest
    container: 
      image: mjh18500/tfimage2:latest
      options: --user root
    name: Run Cypress & E2E Tests
    steps:
      - uses: actions/checkout@v4
     
     # Cache Node.js dependencies
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-  
            
    # Cache Cypress binary
      - name: Cache Cypress binary
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-cypress-

      - name: Install dependencies
        run: npm ci

       # Reuse Terraform provider cache
      - name: Cache Terraform providers
        uses: actions/cache@v3
        with:
          path: /home/runner/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ env.TF_VERSION }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-${{ env.TF_VERSION }}-
            ${{ runner.os }}-terraform- 
          
      - name: Init Backend
        working-directory: terraform/environments/prod
        run: terraform init

      - name: Get Terraform Outputs
        working-directory: terraform/environments/prod
        id: tf-output
        run: |
          echo "FRONTDOOR_URL=$(terraform output -raw frontdoor_endpoint_url)" >> $GITHUB_ENV
          echo "APIM_URL=$(terraform output -raw apim_api_url)" >> $GITHUB_ENV
          echo "FUNCAPP_URL=$(terraform output -raw function_app_url)" >> $GITHUB_ENV
          echo "COSMOSDB_URL=$(terraform output -raw cosmosdb_url)" >> $GITHUB_ENV      

      - name: Run Cypress E2E prod
        run:  npx cypress run
        env:
          CYPRESS_BASE_URL: ${{ env.FRONTDOOR_URL }}
          CYPRESS_APIM_URL: ${{ env.APIM_URL }}
          CYPRESS_FUNCAPP_URL: ${{ env.FUNCAPP_URL }}
          CYPRESS_COSMOSDB_URL: ${{ env.COSMOSDB_URL }}

# --------------------------------------
# 🧹 Destroy test infra after merge
# --------------------------------------
  cleanup:
    needs: [check-pr-merge, deploy-prod]
    if: needs.check-pr-merge.outputs.pr_number != ''
    runs-on: ubuntu-latest
    container: 
      image: mjh18500/tfimage2:latest
      options: --user root
    name: Destroy PR Test Infrastructure
    steps:
      - uses: actions/checkout@v4

      - name: Set ENV_ID from PR number
        run: echo "ENV_ID=${{ needs.check-pr-merge.outputs.pr_number }}" >> $GITHUB_ENV

      # Cache Terraform providers
      - name: Cache Terraform providers
        uses: actions/cache@v3
        with:
          path: /home/runner/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ env.TF_VERSION }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-${{ env.TF_VERSION }}-
            ${{ runner.os }}-terraform-

      - name: Terraform Destroy Test Environment
        working-directory: terraform/environments/test
        run: |
          echo "🧹 Cleaning up test environment for PR #${{ env.ENV_ID }}"
          terraform init
          terraform destroy -auto-approve \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="user_object_id=${{ secrets.ARM_USER_OBJECT_ID }}" \
            -var="pr_number=${{ env.ENV_ID }}" \
            -var="resource_group_name=test-${{ env.ENV_ID }}" \
            -var="location=eastus2" \
            -var="env_name=test-${{ env.ENV_ID }}" || true
          echo "✅ Test environment cleanup completed"